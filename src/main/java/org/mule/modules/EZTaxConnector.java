/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules;

import java.util.List;

import javax.xml.datatype.XMLGregorianCalendar;

import org.datacontract.schemas._2004._07.eztaxwebservice.AddressData;
import org.datacontract.schemas._2004._07.eztaxwebservice.TaxData;
import org.datacontract.schemas._2004._07.eztaxwebservice.Transaction;
import org.datacontract.schemas._2004._07.eztaxwebservice.ZipAddress;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.modules.api.DefaultEZTaxClient;
import org.mule.modules.api.EZTaxClient;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="eztax", schemaVersion="1.0-SNAPSHOT")
public class EZTaxConnector
{
//    /**
//     * Configurable
//     */
//    @Configurable
//    private String username;
//    
//    /**
//     * Configurable
//     */
//    @Configurable
//    private String password;
    
    private EZTaxClient client = null;
    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password)
        throws ConnectionException {
        if( client == null) {
            client =  new DefaultEZTaxClient(username, password);
        }
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        client = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return client != null;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:my-processor}
     *
     * @param content Content to be processed
     * @return Some string
     * 
     * <calculate-taxes strategy="FIPS" customer-type="RESIDENTIAL" sale="true" service-class="PRIMARY_LOCAL" .../>
     */
    @Processor
    public List<TaxData> calculateTaxes(CalculationStrategyType strategy,
                                        String customerType,
                                        Boolean sale,
                                        String serviceClass)
    {
        return client.calculateTaxes(strategy, new Transaction()).getTaxData();
    }
    
    //<calculate-adjustment strategy="FIPS" customer-type="RESIDENTIAL" sale="true" service-class="PRIMARY_LOCAL" .../>
    @Processor
    public List<TaxData> calculateAdjustment(CalculationStrategyType strategy,
                                             String customerType,
                                             Boolean sale,
                                             String serviceClass)
    {
        return client.calculateAdjustment(strategy, new Transaction()).getTaxData();
    }
    
    @Processor
    public List<AddressData> getAddress(Long pCode)
    {
        return client.getAddress(pCode).getAddressData();
    }

    @Processor
    public String getTaxCategory(Integer taxCode)
    {
        return client.getTaxCategory(taxCode);
    }
    
    @Processor
    public String getTaxDescription(Integer taxCode)
    {
        return client.getTaxDescription(taxCode);
    }
    
    @Processor
    public Long convertFipsToPcode(String fips)
    {
        return client.convertFipsToPcode(fips);
    }
    
    @Processor
    public Long convertNpanxxToPcode(Long npanxxCode)
    {
        return client.convertNpanxxToPcode(npanxxCode);
    }
    
    //<convert-zip-to-pcode zipCode="#[map-payload:aZipCode]"/>
    @Processor
    public Long convertZipToPcode(String zipCode)
    {
        ZipAddress zipAddress = new ZipAddress();
        zipAddress.setZipCode(zipCode);
        
        return client.convertZipToPcode(zipAddress);
    }
    
    //<get-server-time/>
    /**
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:my-processor}
     * 
     * @return bla
     */
    @Processor
    public XMLGregorianCalendar getServerTime()
    {
        return client.getServerTime();
    }
    
}
