/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

import org.datacontract.schemas._2004._07.eztaxwebservice.AddressData;
import org.datacontract.schemas._2004._07.eztaxwebservice.TaxData;
import org.datacontract.schemas._2004._07.eztaxwebservice.Transaction;
import org.datacontract.schemas._2004._07.eztaxwebservice.ZipAddress;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Optional;
import org.mule.modules.api.EZTaxClient;

import ar.com.zauber.commons.mom.MapObjectMapper;
import ar.com.zauber.commons.mom.MapObjectMappers;
import ar.com.zauber.commons.mom.converter.TypeConverter;
import ar.com.zauber.commons.mom.style.impl.CXFStyle;



/**
 * Cloud Module
 *
 * @author gastonponti.
 */
@Module(name="eztax", schemaVersion="1.0-SNAPSHOT")
public class EZTaxModule
{
    /**
     * Configurable
     */
    @Configurable
    private String username;
    
    /**
     * Configurable
     */
    @Configurable
    private String password;
    
    private EZTaxClient client = null;
    
    private MapObjectMapper mom = MapObjectMappers.defaultWithPackage("org.datacontract.schemas._2004._07.eztaxwebservice")
                                                    .withSetterStyle(CXFStyle.STYLE)
                                                    .withConverter(new EnumToIntegerConverter())
                                                    .build();

    /**
     * calculateTaxes
     *
     * no es server
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:get-server-time}
     * 
     * @param strategy a
     * @param customerType a
     * @param businessClass a
     * @param sale a
     * @param transactionType a
     * @param serviceType a
     * @param serviceClass a
     * @param date a
     * @param charge a
     * @param incorporated a
     * @param federalExempt a
     * @param stateExempt a
     * @param countyExempt a
     * @param localExempt a
     * @param federalPCode a
     * @param statePCode a
     * @param countyPCode a
     * @param localPCode a
     * @param taxExemptions a
     * @param invoiceNumber a
     * @param optional a
	 * @param customerNumber a
	 * @param companyIdentifier a
	 * @param optionalAlpha1 a
	 * @param optional4 a
	 * @param optional5 a
	 * @param optional6 a
	 * @param optional7 a
	 * @param optional8 a
	 * @param optional9 a
	 * @param optional10 a
	 * @param adjustmentMethod a
	 * @param originationAddress a
	 * @param originationFipsCode a
	 * @param originationPCode a
	 * @param originationNpaNxx a
	 * @param terminationAddress a
	 * @param terminationFipsCode a
	 * @param terminationPCode a
	 * @param terminationNpaNxx a
	 * @param billToAddress a
	 * @param billToFipsCode a
	 * @param billToPCode a
	 * @param billToNpaNxx a
	 * @param lines a
	 * @param locations a
	 * @param minutes a
	 * @param debit a
	 * @param discountType a
	 * @param facilitiesBased a
	 * @param franchise a
	 * @param lifeline a
	 * @param regulated a
	 * @param serviceLevelNumber a
     * @return a
     */
    @Processor
    public List<TaxData> calculateTaxes(CalculationStrategyType strategy,
                                        @Optional final CustomerType customerType,
                                        @Optional final BusinessClassType businessClass,
                                        final Boolean sale,
                                        final Short transactionType,
                                        final Short serviceType,
                                        @Optional final ServiceClassType serviceClass,
                                        final Date date,
                                        final Double charge,
                                        final Boolean incorporated,
                                        final Boolean federalExempt,
                                        final Boolean stateExempt,
                                        final Boolean countyExempt,
                                        final Boolean localExempt,
                                        final Long federalPCode,
                                        final Long statePCode,
                                        final Long countyPCode,
                                        final Long localPCode,
                                        @Optional final List<Map<String, Object>> taxExemptions,
                                        final Long invoiceNumber,
                                        final Long optional,
                                        @Optional final String customerNumber,
                                        @Optional final String companyIdentifier,
                                        @Optional final String optionalAlpha1,
                                        final Long optional4,
                                        final Long optional5,
                                        final Long optional6,
                                        final Long optional7,
                                        final Long optional8,
                                        final Long optional9,
                                        final Long optional10,
                                        final AdjustmentMethodType adjustmentMethod,
                                        @Optional final Map<String, Object> originationAddress,
                                        @Optional final String originationFipsCode,
                                        @Optional final Long originationPCode,
                                        @Optional final Long originationNpaNxx,
                                        @Optional final Map<String, Object> terminationAddress,
                                        @Optional final String terminationFipsCode,
                                        @Optional final Long terminationPCode,
                                        @Optional final Long terminationNpaNxx,                                      
                                        @Optional final Map<String, Object> billToAddress,
                                        @Optional final String billToFipsCode,
                                        @Optional final Long billToPCode,
                                        @Optional final Long billToNpaNxx,
                                        final Integer lines,
                                        final Integer locations,
                                        final Double minutes,
                                        final Boolean debit,
                                        final DiscountType discountType,
                                        final Boolean facilitiesBased,
                                        final Boolean franchise,
                                        final Boolean lifeline,
                                        final Boolean regulated,
                                        final Long serviceLevelNumber)
    {
        final Map<String, Object> exemptions = new HashMap<String, Object>()
                        {{
                            put("taxExemption", taxExemptions);
                        }};
        Map<String, Object> transactionMap = new HashMap<String, Object>()
                        {{
                            put("customerType", customerType);
                            put("businessClass", businessClass);
                            put("sale", sale);
                            put("transactionType", transactionType);
                            put("serviceType", serviceType);
                            put("serviceClass", serviceClass);
                            put("date", date);
                            put("charge", charge);
                            put("incorporated", incorporated);
                            put("federalExempt", federalExempt);
                            put("stateExempt", stateExempt);
                            put("countyExempt", countyExempt);
                            put("localExempt", localExempt);
                            put("federalPCode", federalPCode);
                            put("statePCode", statePCode);
                            put("countyPCode", countyPCode);
                            put("localPCode", localPCode);
                            put("exemptionType", 0); //set to 0 - reserved for future use
                            put("exemptions", exemptions);
                            put("invoiceNumber", invoiceNumber);
                            put("optional", optional);
                            put("customerNumber", customerNumber);
                            put("companyIdentifier", companyIdentifier);
                            put("optionalAlpha1", optionalAlpha1);
                            put("optional4", optional4);
                            put("optional5", optional5);
                            put("optional6", optional6);
                            put("optional7", optional7);
                            put("optional8", optional8);
                            put("optional9", optional9);
                            put("optional10", optional10);
                            put("adjustmentMethod", adjustmentMethod);
                            put("originationAddress", originationAddress);
                            put("originationFipsCode", originationFipsCode);
                            put("originationPCode", originationPCode);
                            put("originationNpaNxx", originationNpaNxx);
                            put("terminationAddress", terminationAddress);
                            put("terminationFipsCode", terminationFipsCode);
                            put("terminationPCode", terminationPCode);
                            put("terminationNpaNxx", terminationNpaNxx);                                      
                            put("billToAddress", billToAddress);
                            put("billToFipsCode", billToFipsCode);
                            put("billToPCode", billToPCode);
                            put("billToNpaNxx", billToNpaNxx);
                            put("lines", lines);
                            put("locations", locations);
                            put("minutes", minutes);
                            put("debit", debit);
                            put("discountType", discountType);
                            put("facilitiesBased", facilitiesBased);
                            put("franchise", franchise);
                            put("lifeline", lifeline);
                            put("regulated", regulated);
                            put("serviceLevelNumber", serviceLevelNumber);
                        }};
        return client.calculateTaxes(strategy, (Transaction) mom.unmap(transactionMap, Transaction.class) ).getTaxData();
    }
    
    /**
     * calculateAdjustment
     * 
     * no es server
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:get-server-time}
     *
     * @param strategy a
     * @param customerType a
     * @param businessClass a
     * @param sale a
     * @param transactionType a
     * @param serviceType a
     * @param serviceClass a
     * @param date a
     * @param charge a
     * @param incorporated a
     * @param federalExempt a
     * @param stateExempt a
     * @param countyExempt a
     * @param localExempt a
     * @param federalPCode a
     * @param statePCode a
     * @param countyPCode a
     * @param localPCode a
     * @param taxExemptions a
     * @param invoiceNumber a
     * @param optional a
     * @param customerNumber a
     * @param companyIdentifier a
     * @param optionalAlpha1 a
     * @param optional4 a
     * @param optional5 a
     * @param optional6 a
     * @param optional7 a
     * @param optional8 a
     * @param optional9 a
     * @param optional10 a
     * @param adjustmentMethod a
     * @param originationAddress a
     * @param originationFipsCode a
     * @param originationPCode a
     * @param originationNpaNxx a
     * @param terminationAddress a
     * @param terminationFipsCode a
     * @param terminationPCode a
     * @param terminationNpaNxx a
     * @param billToAddress a
     * @param billToFipsCode a
     * @param billToPCode a
     * @param billToNpaNxx a
     * @param lines a
     * @param locations a
     * @param minutes a
     * @param debit a
     * @param discountType a
     * @param facilitiesBased a
     * @param franchise a
     * @param lifeline a
     * @param regulated a
     * @param serviceLevelNumber a
     * @return a
     */
    @Processor
    public List<TaxData> calculateAdjustment(CalculationStrategyType strategy,
                                        @Optional final CustomerType customerType,
                                        @Optional final BusinessClassType businessClass,
                                        final Boolean sale,
                                        final Short transactionType,
                                        final Short serviceType,
                                        @Optional final ServiceClassType serviceClass,
                                        final Date date,
                                        final Double charge,
                                        final Boolean incorporated,
                                        final Boolean federalExempt,
                                        final Boolean stateExempt,
                                        final Boolean countyExempt,
                                        final Boolean localExempt,
                                        final Long federalPCode,
                                        final Long statePCode,
                                        final Long countyPCode,
                                        final Long localPCode,
                                        @Optional final List<Map<String, Object>> taxExemptions,
                                        final Long invoiceNumber,
                                        final Long optional,
                                        @Optional final String customerNumber,
                                        @Optional final String companyIdentifier,
                                        @Optional final String optionalAlpha1,
                                        final Long optional4,
                                        final Long optional5,
                                        final Long optional6,
                                        final Long optional7,
                                        final Long optional8,
                                        final Long optional9,
                                        final Long optional10,
                                        final AdjustmentMethodType adjustmentMethod,
                                        @Optional final Map<String, Object> originationAddress,
                                        @Optional final String originationFipsCode,
                                        @Optional final Long originationPCode,
                                        @Optional final Long originationNpaNxx,
                                        @Optional final Map<String, Object> terminationAddress,
                                        @Optional final String terminationFipsCode,
                                        @Optional final Long terminationPCode,
                                        @Optional final Long terminationNpaNxx,                                      
                                        @Optional final Map<String, Object> billToAddress,
                                        @Optional final String billToFipsCode,
                                        @Optional final Long billToPCode,
                                        @Optional final Long billToNpaNxx,
                                        final Integer lines,
                                        final Integer locations,
                                        final Double minutes,
                                        final Boolean debit,
                                        final DiscountType discountType,
                                        final Boolean facilitiesBased,
                                        final Boolean franchise,
                                        final Boolean lifeline,
                                        final Boolean regulated,
                                        final Long serviceLevelNumber)
    {
        final Map<String, Object> exemptions = new HashMap<String, Object>()
                        {{
                            put("taxExemption", taxExemptions);
                        }};
        Map<String, Object> transactionMap = new HashMap<String, Object>()
                        {{
                            put("customerType", customerType);
                            put("businessClass", businessClass);
                            put("sale", sale);
                            put("transactionType", transactionType);
                            put("serviceType", serviceType);
                            put("serviceClass", serviceClass);
                            put("date", date);
                            put("charge", charge);
                            put("incorporated", incorporated);
                            put("federalExempt", federalExempt);
                            put("stateExempt", stateExempt);
                            put("countyExempt", countyExempt);
                            put("localExempt", localExempt);
                            put("federalPCode", federalPCode);
                            put("statePCode", statePCode);
                            put("countyPCode", countyPCode);
                            put("localPCode", localPCode);
                            put("exemptionType", 0); //set to 0 - reserved for future use
                            put("exemptions", exemptions);
                            put("invoiceNumber", invoiceNumber);
                            put("optional", optional);
                            put("customerNumber", customerNumber);
                            put("companyIdentifier", companyIdentifier);
                            put("optionalAlpha1", optionalAlpha1);
                            put("optional4", optional4);
                            put("optional5", optional5);
                            put("optional6", optional6);
                            put("optional7", optional7);
                            put("optional8", optional8);
                            put("optional9", optional9);
                            put("optional10", optional10);
                            put("adjustmentMethod", adjustmentMethod);
                            put("originationAddress", originationAddress);
                            put("originationFipsCode", originationFipsCode);
                            put("originationPCode", originationPCode);
                            put("originationNpaNxx", originationNpaNxx);
                            put("terminationAddress", terminationAddress);
                            put("terminationFipsCode", terminationFipsCode);
                            put("terminationPCode", terminationPCode);
                            put("terminationNpaNxx", terminationNpaNxx);                                      
                            put("billToAddress", billToAddress);
                            put("billToFipsCode", billToFipsCode);
                            put("billToPCode", billToPCode);
                            put("billToNpaNxx", billToNpaNxx);
                            put("lines", lines);
                            put("locations", locations);
                            put("minutes", minutes);
                            put("debit", debit);
                            put("discountType", discountType);
                            put("facilitiesBased", facilitiesBased);
                            put("franchise", franchise);
                            put("lifeline", lifeline);
                            put("regulated", regulated);
                            put("serviceLevelNumber", serviceLevelNumber);
                        }};
        return client.calculateAdjustment(strategy, (Transaction) mom.unmap(transactionMap, Transaction.class) ).getTaxData();
    }
    
    /**
     * This method returns the addresses for the specified jurisdiction. If the 
     * jurisdiction is invalid the return will be NULL.
     *
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:get-address}
     * 
     * @param pCode The PCode for the desired jurisdiction.
     * @return A list of {@link AddressData} objects that contain the addresses 
     *         for the jurisdiction specified by the supplied PCode.
     */
    @Processor
    public List<AddressData> getAddress(Long pCode)
    {
        return client.getAddress(pCode).getAddressData();
    }

    /**
     * This method returns the tax category for the specified tax type. If the tax 
     * type is invalid the return will be NULL or an empty string.
     *
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:get-tax-category}
     * 
     * @param taxCode The tax type.
     * @return A string describing the tax category for the specified tax type.
     */
    @Processor
    public String getTaxCategory(Integer taxCode)
    {
        return client.getTaxCategory(taxCode);
    }
    
    /**
     * This method returns the description for the specified tax type. If the tax 
     * type is invalid the return will be NULL or an empty string.
     *
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:get-tax-description}
     * 
     * @param taxCode The tax type.
     * @return A string describing the specified tax type.
     */
    @Processor
    public String getTaxDescription(Integer taxCode)
    {
        return client.getTaxDescription(taxCode);
    }
    
    /**
     * This method returns the PCode for the specified FIPS code. If the FIPS Code 
     * is invalid or has no EZTax jurisdiction the return will be NULL.
     *
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:convert-fips-to-pcode}
     * 
     * @param fips The FIPS code.
     * @return The PCode.
     */
    @Processor
    public Long convertFipsToPcode(String fips)
    {
        return client.convertFipsToPcode(fips);
    }
    
    /**
     * This method returns the PCode for the specified NpaNxx value. If the NpaNxx 
     * value is invalid or has no EZTax jurisdiction the return will be NULL.
     *
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:convert-npanxx-to-pcode}
     * 
     * @param npanxxCode The NpaNxx value.
     * @return The PCode.
     */
    @Processor
    public Long convertNpanxxToPcode(Long npanxxCode)
    {
        return client.convertNpanxxToPcode(npanxxCode);
    }

    /**
     * This method returns the PCode for the specified ZIP code. If the ZIP code 
     * is invalid or has no EZTax jurisdiction the return will be NULL.
     *
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:convert-zip-to-pcode}
     * 
     * @param zipCode The address Zip code
     * @return The PCode.
     */
    @Processor
    public Long convertZipToPcode(String zipCode)
    {
        ZipAddress zipAddress = new ZipAddress();
        zipAddress.setZipCode(zipCode);
        
        return client.convertZipToPcode(zipAddress);
    }
    
    /**
     * This method returns the time on the EZTax Web Service.
     *
     * {@sample.xml ../../../doc/EZTax-connector.xml.sample eztax:get-server-time}
     * 
     * @return The EZTax Web Service server time.
     */
    @Processor
    public XMLGregorianCalendar getServerTime()
    {
        return client.getServerTime();
    }

    /**
     * Returns the username.
     * 
     * @return  with the username.
     */
    
    public String getUsername()
    {
        return username;
    }

    /**
     * Sets the username. 
     *
     * @param username  with the username.
     */
    
    public void setUsername(String username)
    {
        this.username = username;
    }

    /**
     * Returns the password.
     * 
     * @return  with the password.
     */
    
    public String getPassword()
    {
        return password;
    }

    /**
     * Sets the password. 
     *
     * @param password  with the password.
     */
    
    public void setPassword(String password)
    {
        this.password = password;
    }
    
    /**
     * @author Gaston Ponti
     * @since Dec 2, 2011
     */
    private final class EnumToIntegerConverter implements TypeConverter
    {
        @Override
        public <A> A convert(Object value, Class<A> destinationType)
        {
            EZTaxEnums enum_ = (EZTaxEnums) value;
            if(destinationType == Integer.class)
                return (A)((Integer)enum_.getValue());
            else if (destinationType == Short.class)
                return (A)((Short) ((short) enum_.getValue()));
            else
                throw new IllegalArgumentException();
        }
    
        @Override
        public boolean canConvert(Class<?> sourceType, Class<?> destinationType)
        {
            return sourceType.isEnum() && (isIntegral(destinationType));
        }
    
        protected boolean isIntegral(Class<?> destinationType)
        {
            return destinationType == Integer.class || destinationType == Short.class;
        }
    }
}
